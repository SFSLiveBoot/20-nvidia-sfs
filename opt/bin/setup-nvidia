#!/bin/sh

: "${nvdir:=/opt/nvidia}"
: "${xorg_conf:=/etc/X11/xorg.conf.d/nvidia-xorg.conf}"
: "${ldso_conf:=/etc/ld.so.conf.d/nvidia.conf}"

: "${kver:=$(uname -r)}"

get_nv_ver() {
  local nv_ver_test
  if test -L "$nvdir";then
    nv_ver_test="$(readlink "$nvdir" | sed -e "s/.*-//")"
    test -z "$nv_ver_test" -o -n "$(echo "$nv_ver_test" | tr -d 0-9.)" || {
      echo "$nv_ver_test"
      return
    }
  fi
  if test -r "$nvdir/README.txt";then
    nv_ver_test="$(awk '/Most Recent Driver Version:/{print $5}' "$nvdir/README.txt")"
    test -z "$nv_ver_test" -o -n "$(echo "$nv_ver_test" | tr -d 0-9.)" || {
      echo "$nv_ver_test"
      return
    }
  fi
  echo "WARNING: cannot determine NVidia driver version" >&2
  return 1
}

: "${nv_ver:=$(get_nv_ver)}"
: "${mod_build:=/usr/src/nvidia-$nv_ver}"

test ! -e /etc/default/nvidia || . /etc/default/nvidia

has_nvidia() {
  local pci
  for pci in $(grep -l 0x10de /sys/bus/pci/devices/*/vendor);do
    if grep -q 0x0300 "${pci%/vendor}/class";then
      return 0
    fi
  done
  return 1
}

prep_modules() {
  grep -q /nvidia.ko: /lib/modules/$kver/modules.dep || depmod $kver
  grep -q /nvidia.ko: /lib/modules/$kver/modules.dep && test "x$(modinfo -F version nvidia)" = "x$nv_ver" || {
    test -d "$mod_build" || cp -r "$nvdir/kernel" "$mod_build"
    local j="$(grep -c ^processor /proc/cpuinfo)"
    test -n "$j" || j=1
    for f in 1 1-2; do
      export IGNORE_CC_MISMATCH=""
      kernel_cc_ver="$(grep -o "gcc version [^[:space:]]*" /proc/version | cut -f3 -d " "  | cut -f$f -d.)"
      cc_ver="$(${CC:-gcc} --version | head -1 | sed -e 's/.* //' | cut -f$f -d.)"
      if test "$kernel_cc_ver" = "$cc_ver";then
        break
        elif test -x "$(which gcc-$kernel_cc_ver)";then
        export CC="gcc-$kernel_cc_ver"
        break
    else export IGNORE_CC_MISMATCH=1;fi
    done
    if test -e "$mod_build/dkms.conf";then
      mod_tmp="$(mktemp)"
            cat >"$mod_tmp" <<"EOF"
BUILT_MODULE_NAME[0]="nvidia"
DEST_MODULE_LOCATION[0]="/kernel/drivers/video"
BUILT_MODULE_NAME[1]="nvidia-uvm"
DEST_MODULE_LOCATION[1]="/kernel/drivers/video"
BUILT_MODULE_NAME[2]="nvidia-modeset"
DEST_MODULE_LOCATION[2]="/kernel/drivers/video"
BUILT_MODULE_NAME[3]="nvidia-drm"
DEST_MODULE_LOCATION[3]="/kernel/drivers/video"
EOF
      sed -e "/__DKMS_MODULES/{z;r $mod_tmp
}" \
          -e "s/__IGNORE_CC_MISMATCH/$IGNORE_CC_MISMATCH/g" \
          -e "s/__EXCLUDE_MODULES//g" -e "s/__JOBS/$j/g" \
          -e "s/__VERSION_STRING/$nv_ver/g" \
          -e "s/will be/was/" \
          -i "$mod_build/dkms.conf"
      rm -f "$mod_tmp"
      dkms install "$mod_build"
    else
      (
        cd "$mod_build"
        make -j$j
        make -f Makefile INSTALL_MOD_STRIP=1 modules_install
        test ! -d uvm || {
          cd uvm
          make -j$j
          make -f Makefile INSTALL_MOD_STRIP=1 modules_install
        }
        depmod $kver
      )
    fi
  }
}

prep_alt_glx() {
  update-alternatives --list glx | grep -q "$nvdir" || {
    local nv_glx="$(find "$nvdir/" -name "libglx.so.*" | head -1)"
    local nv_glxserver="$(find "$nvdir/" -name "libglxserver_nvidia.so.*" | head -1)"
    update-alternatives --install /usr/lib/glx glx "$nvdir" 10 \
      --slave /usr/lib/x86_64-linux-gnu/libGL.so.1 glx--libGL.so.1-x86_64-linux-gnu "$nvdir"/libGL.so.1.* \
      --slave /usr/lib/x86_64-linux-gnu/libEGL.so.1 glx--libEGL.so.1-x86_64-linux-gnu "$nvdir"/libEGL.so.1 \
      --slave /usr/lib/x86_64-linux-gnu/libGLESv2.so.2 glx--libGLESv2.so.2-x86_64-linux-gnu "$nvdir"/libGLESv2.so.2 \
      --slave /usr/lib/i386-linux-gnu/libGL.so.1 glx--libGL.so.1-i386-linux-gnu "$nvdir"/32/libGL.so.1.* \
      --slave /usr/lib/i386-linux-gnu/libEGL.so.1 glx--libEGL.so.1-i386-linux-gnu "$nvdir"/32/libEGL.so.1 \
      --slave /usr/lib/i386-linux-gnu/libGLESv2.so.2 glx--libGLESv2.so.2-i386-linux-gnu "$nvdir"/32/libGLESv2.so.2 \
      ${nv_glx:+--slave /usr/lib/xorg/modules/linux/libglx.so glx--libglx.so "$nv_glx"} \
      ${nv_glxserver:+--slave /usr/lib/xorg/modules/extensions/libglxserver_nvidia.so glx--libglxserver.so "$nv_glxserver"}
    ldconfig
  }
}

create_xorg_conf() {
  local pci bus_id dev_cls dev_id rest
  mkdir -p "${xorg_conf%/*}"
  local nr=0
  for pci in $(grep -l 0x10de /sys/bus/pci/devices/*/vendor);do
    pci="${pci%/vendor}"
    grep -q 0x0300 "${pci}/class" || continue
    bus_id="${pci##*/}"
    bus_id="${bus_id#*:}"
    cat >>"$xorg_conf" <<EOF
Section "Device"
    Identifier  "card$nr"
    Driver      "nvidia"
    BusID       "PCI:$(echo "$bus_id" | tr . :)"
EndSection
EOF
  nr="$(($nr+1))"
  done
  for pci in $(grep -l 0x0300 /sys/bus/pci/devices/*/class);do
    pci="${pci%/class}"
    if grep -q 0x10de "${pci}/vendor";then continue;fi
    bus_id="${pci##*/}"
    bus_id="${bus_id#*:}"
    cat >>"$xorg_conf" <<EOF
Section "Device"
    Identifier  "card$nr"
    Driver      "modesetting"
    BusID       "PCI:$(echo "$bus_id" | tr . :)"
EndSection
EOF
  nr="$(($nr+1))"
  done
}

mv_pre_vulkan() {
  local IFS_save="$IFS" non_vulkan_dir
  local non_vulkan_sh='for lib;do bn="${lib##*/}"; test -z "$(find "${lib%/*}/" -maxdepth 1 -type f -name "${bn%.$nv_ver}*" -not -name "$bn")" || echo "$lib";done'
  for lib in $(nv_ver="$nv_ver" find "$nvdir"/ -name "lib*.so.$nv_ver" -exec sh -c "$non_vulkan_sh" _ {} +);do
    non_vulkan_dir="${lib%/*}/non-vulkan"
    test -d "$non_vulkan_dir" || mkdir -v -p "$non_vulkan_dir"
    mv -v "$lib" "$non_vulkan_dir"
  done
  IFS="$IFS_save"
}

prep_libs() {
  find "$nvdir/" -name "lib*.so.*.*" -exec ldconfig -l {} +
  test -e "$ldso_conf" || cat >"$ldso_conf" <<EOF
$nvdir
$nvdir/32
EOF
  ldconfig
}

prep_devices() {
  local mod devid_uvm devid_nvfe
  for mod in nvidia_uvm nvidia_drm nvidia_modeset nvidia;do
    test -d "/sys/module/$mod" || modprobe "$mod"
  done

  devid_uvm="$(awk '/nvidia-uvm/{print $1}' /proc/devices)"
  devid_nvfe="$(awk '/nvidia-frontend|nvidiactl/{print $1}' /proc/devices | head -1)"

  test -e /dev/nvidia-uvm || test -z "$devid_uvm" || {
    mknod -m 0666 /dev/nvidia-uvm c $devid_uvm 0
  }

  test -z "$devid_nvfe" || {
    test -e /dev/nvidia0 || mknod -m 0666 /dev/nvidia0 c $devid_nvfe 0
    test -e /dev/nvidiactl || mknod -m 0666 /dev/nvidiactl c $devid_nvfe 255
    test -e /dev/nvidia-modeset || mknod -m 0666 /dev/nvidia-modeset c $devid_nvfe 254
  }
}

prep_vulkan() {
  local json_tmpl="$nvdir/nvidia_icd.json.template" icd_json="$nvdir/nvidia_icd.json" json_dst="/usr/share/vulkan/icd.d/nvidia_icd.json"
  mkdir -p "${json_dst%/*}"
  if test -e "$icd_json";then
    cp "$icd_json" "$json_dst"
  elif test -e "$json_tmpl";then
    sed -e "s/__NV_VK_ICD__/libGLX_nvidia.so.0/g" "$json_tmpl" >"$json_dst"
  fi
}

prep_egl() {
  local src="$nvdir/10_nvidia.json" dst="/usr/share/glvnd/egl_vendor.d/10_nvidia.json" 
  if test -d "${dst%/*}" -a -e "$src" -a ! -e "$dst";then
    ln -s "$src" "$dst"
  fi
}

has_nvidia || exit 0
set -e
mv_pre_vulkan
prep_libs
test ! -d "/lib/modules/$(uname -r)" || prep_modules
test -e "$xorg_conf" || create_xorg_conf
prep_alt_glx
prep_vulkan
prep_devices
prep_egl
